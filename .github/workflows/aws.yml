on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to AWS ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/mi_fatality_prediction:latest .

      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/mi_fatality_prediction:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add EC2 host to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy Docker container to EC2
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          ssh -o "StrictHostKeyChecking=no" $EC2_USER@$EC2_HOST << EOF
          set -e

          echo "Starting deployment to EC2 instance at \$(date)..."

          # Update package database
          echo "Updating package database..."
          sudo apt-get update -y

          # Install required utilities
          echo "Installing required utilities..."
          sudo apt-get install -y unzip docker.io nginx

          # Clean up disk space if low
          echo "Cleaning up disk space..."
          docker system prune -af || true
          sudo apt-get autoremove -y
          sudo rm -rf /var/log/* || true

          # Ensure Docker service is running
          echo "Starting Docker service..."
          sudo systemctl start docker
          sudo systemctl enable docker

          # Add current user to Docker group
          CURRENT_USER=\$(whoami)  # Dynamically fetch the current user
          echo "Adding current user (\$CURRENT_USER) to Docker group..."
          sudo usermod -aG docker \$CURRENT_USER

          # Apply group permissions and execute Docker commands
          newgrp docker << INNER_EOF

          # Install AWS CLI if not installed
          if ! command -v aws &> /dev/null; then
              echo "Installing AWS CLI..."
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
              rm -rf awscliv2.zip aws
          fi

          # Authenticate with AWS ECR and pull the Docker image
          echo "Authenticating with AWS ECR..."
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

          echo "Pulling Docker image..."
          docker pull $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/mi_fatality_prediction:latest

          # Stop and remove existing containers
          echo "Stopping and removing any running container..."
          RUNNING_CONTAINER=\$(docker ps -q)
          if [ -n "\$RUNNING_CONTAINER" ]; then
              docker stop \$RUNNING_CONTAINER
              docker rm \$RUNNING_CONTAINER
          fi

          # Configure and restart Nginx
          echo "Configuring Nginx..."
          sudo tee /etc/nginx/sites-available/fastapi << NGINX_CONF
          server {
              listen 80;
              server_name localhost;

              location / {
                  proxy_pass http://127.0.0.1:8000;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
              }
          }
          NGINX_CONF

          sudo ln -sf /etc/nginx/sites-available/fastapi /etc/nginx/sites-enabled/fastapi
          sudo nginx -t
          sudo systemctl restart nginx

          # Run the Docker container
          echo "Running the Docker container..."
          docker run -d -p 8000:80 $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/mi_fatality_prediction:latest

          INNER_EOF

          echo "Deployment completed successfully!"
          EOF
