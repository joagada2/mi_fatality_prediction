- name: Deploy Application via SSH
  uses: appleboy/ssh-action@v0.1.10
  with:
    host: ${{ secrets.EC2_HOST }}
    username: ${{ secrets.EC2_USER }}
    key: ${{ secrets.SSH_PRIVATE_KEY }}
    port: 22
    script: |
      set -e

      # Install Docker if not installed
      echo "Checking Docker installation..."
      if ! command -v docker &> /dev/null; then
        echo "Installing Docker..."
        sudo apt-get update
        sudo apt-get install -y docker.io
      fi

      # Install Caddy if not installed
      echo "Checking Caddy installation..."
      if ! command -v caddy &> /dev/null; then
        echo "Installing Caddy..."
        sudo apt update
        sudo apt install -y debian-keyring debian-archive-keyring apt-transport-https
        curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | sudo gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg
        curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' | sudo tee /etc/apt/sources.list.d/caddy-stable.list
        sudo apt update
        sudo apt install -y caddy
      fi

      # Authenticate with AWS ECR
      echo "Authenticating with AWS ECR..."
      aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      # Pull Docker image from ECR
      echo "Pulling Docker image from ECR..."
      docker pull ${{ secrets.ECR_URL }}:latest

      # Identify and stop process using port 8000
      echo "Checking for processes using port 8000..."
      PID=$(sudo lsof -t -i :8000)
      if [ -n "$PID" ]; then
        echo "Stopping process $PID using port 8000..."
        sudo kill -9 $PID
      fi

      # Stop and remove any existing Docker container
      echo "Stopping and removing old containers..."
      docker stop my-app || true
      docker rm my-app || true

      # Run the Docker container
      echo "Running new container..."
      docker run -d -p 8000:8000 --name my-app ${{ secrets.ECR_URL }}:latest

      # Create Caddyfile
      echo "Creating Caddyfile..."
      echo ":80 {
          reverse_proxy localhost:8000
      }" | sudo tee /etc/caddy/Caddyfile

      # Restart Caddy to apply the new configuration
      echo "Restarting Caddy..."
      sudo systemctl restart caddy