name: CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  AWS_REGION: "us-east-2"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout Code
    - name: Checkout Code
      uses: actions/checkout@v3

    # Step 2: Authenticate with AWS CLI
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # Step 3: Login to ECR
    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.ECR_URL }}

    # Step 4: Build and Push Docker Image
    - name: Build and Push Docker Image
      run: |
        docker build -t my-app .
        docker tag my-app:latest ${{ secrets.ECR_URL }}:latest
        docker push ${{ secrets.ECR_URL }}:latest

    # Step 5: SSH into Server and Deploy
    - name: SSH into Server and Deploy
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 22
        script: |
          echo "Stopping and removing old containers..."
          docker stop my-app || true
          docker rm my-app || true
          
          echo "Pulling Docker image from ECR..."
          docker pull ${{ secrets.ECR_URL }}:latest
          
          echo "Running new container..."
          docker run -d -p 80:80 --name my-app ${{ secrets.ECR_URL }}:latest

    # Step 6: Verify Deployment
    - name: Verify Deployment
      run: |
        curl -I http://${{ secrets.EC2_HOST }}
