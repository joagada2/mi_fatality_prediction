name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to AWS ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          region: ${{ secrets.AWS_REGION }}

      - name: Build Docker image
        id: build-image
        run: |
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/mi_fatality_prediction:latest .

      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/mi_fatality_prediction:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to AWS ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          region: ${{ secrets.AWS_REGION }}

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add EC2 host to known hosts
        run: |
          ssh-keyscan ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy Docker container to EC2
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          ssh -o "StrictHostKeyChecking=no" $EC2_USER@$EC2_HOST << 'EOF'
          set -e  # Exit immediately if a command exits with a non-zero status

          echo "Starting deployment to EC2 instance at $(date)..."

          # Update package database
          echo "Updating package database..."
          sudo apt-get update -y

          # Install Docker if not installed
          echo "Checking Docker installation..."
          if ! command -v docker &> /dev/null; then
            echo "Docker is not installed. Installing Docker..."
            sudo apt-get install -y docker.io
          else
            echo "Docker is already installed."
          fi

          # Start Docker service
          echo "Ensuring Docker service is running..."
          sudo systemctl start docker
          sudo systemctl enable docker

          # Install AWS CLI if not installed
          echo "Checking AWS CLI installation..."
          if ! command -v aws &> /dev/null; then
            echo "AWS CLI is not installed. Installing AWS CLI..."
            sudo apt-get install -y unzip curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            echo "AWS CLI installed successfully."
          else
            echo "AWS CLI is already installed."
          fi

          # Authenticate with AWS ECR
          echo "Authenticating with AWS ECR..."
          aws ecr get-login-password --region $AWS_REGION | sudo docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
          if [ $? -ne 0 ]; then
            echo "ECR authentication failed. Exiting."
            exit 1
          fi

          # Pull Docker image from ECR
          echo "Pulling Docker image from ECR..."
          sudo docker pull $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/mi_fatality_prediction:latest
          if [ $? -ne 0 ]; then
            echo "Failed to pull Docker image. Exiting."
            exit 1
          fi

          # Stop and remove any running containers
          echo "Stopping and removing existing containers (if any)..."
          RUNNING_CONTAINER=$(sudo docker ps -q)
          if [ -n "$RUNNING_CONTAINER" ]; then
            echo "Stopping running container: $RUNNING_CONTAINER"
            sudo docker stop $RUNNING_CONTAINER
            sudo docker rm $RUNNING_CONTAINER
          else
            echo "No running containers found."
          fi

          # Run Docker container
          echo "Running the new Docker container..."
          sudo docker run -d -p 80:80 $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/mi_fatality_prediction:latest
          if [ $? -ne 0 ]; then
            echo "Failed to start the Docker container. Exiting."
            exit 1
          fi

          echo "Deployment completed successfully at $(date)!"
          EOF
