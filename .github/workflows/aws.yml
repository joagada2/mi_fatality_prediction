name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Authenticate to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.ECR_URL }}:latest .
          docker push ${{ secrets.ECR_URL }}:latest
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Deploy Application via SSH
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            set -e
            echo "Installing dependencies..."
            sudo apt-get update
            sudo apt-get install -y docker.io curl

            echo "Authenticating AWS ECR..."
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

            echo "Pulling latest Docker image..."
            docker pull ${{ secrets.ECR_URL }}:latest

            echo "Stopping existing containers..."
            docker stop my-app || true
            docker rm my-app || true

            echo "Ensuring port 8000 is free..."
            PIDS=$(sudo lsof -t -i :8000 || true)
            if [ -n "$PIDS" ]; then
              echo "Stopping processes using port 8000: $PIDS"
              sudo kill -9 $PIDS
            fi

            echo "Cleaning up dangling Docker containers..."
            docker container prune -f

            echo "Running new container on port 8000..."
            docker run -d -p 8000:8000 --name my-app ${{ secrets.ECR_URL }}:latest

            echo "Checking container status..."
            for i in {1..10}; do
              STATUS=$(docker inspect -f '{{.State.Status}}' my-app || echo "not-found")
              if [ "$STATUS" == "running" ]; then
                echo "Container is running!"
                break
              else
                echo "Waiting for container to start. Current status: $STATUS"
                sleep 10
              fi
            done

            if [ "$STATUS" != "running" ]; then
              echo "Container failed to start."
              docker logs my-app
              exit 1
            fi

            echo "Configuring Caddy to reverse proxy to port 8000..."
            echo ":80 {
                reverse_proxy 0.0.0.0:8000
            }" | sudo tee /etc/caddy/Caddyfile

            echo "Restarting Caddy to apply the new configuration..."
            sudo systemctl restart caddy
