name: CI/CD Pipeline with Caddy

on:
  push:
    branches:
      - main

env:
  ECR_REPO_NAME: my-app-repo  # Change this to your desired repository name

jobs:
  create-ecr-repository:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create ECR Repository
        run: |
          # Check if repository exists, create if it doesn't
          aws ecr describe-repositories --repository-names ${{ env.ECR_REPO_NAME }} || \
          aws ecr create-repository --repository-name ${{ env.ECR_REPO_NAME }}
          echo "ECR_REPO_URL=$(aws ecr describe-repositories --repository-names ${{ env.ECR_REPO_NAME }} --query 'repositories[0].repositoryUri' --output text)" >> $GITHUB_ENV

  deploy:
    needs: create-ecr-repository
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, Tag, and Push Docker Image
        run: |
          docker build -t ${{ env.ECR_REPO_URL }}:latest .
          docker push ${{ env.ECR_REPO_URL }}:latest

      - name: Deploy Application via SSH
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            set -e
            echo "Installing dependencies..."
            sudo apt-get update
            sudo apt-get install -y docker.io curl

            echo "Installing Caddy..."
            sudo apt install -y debian-keyring debian-archive-keyring apt-transport-https
            curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | sudo gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg
            curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' | sudo tee /etc/apt/sources.list.d/caddy-stable.list
            sudo apt update
            sudo apt install -y caddy

            echo "Authenticating AWS ECR..."
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

            echo "Pulling latest Docker image..."
            docker pull ${{ env.ECR_REPO_URL }}:latest

            echo "Stopping existing containers..."
            docker stop my-app || true
            docker rm my-app || true

            echo "Running new container on port 8000..."
            docker run -d -p 8000:8000 --name my-app ${{ env.ECR_REPO_URL }}:latest

            echo "Configuring Caddy..."
            sudo tee /etc/caddy/Caddyfile <<EOF
            ${{ secrets.DOMAIN_NAME || 'localhost' }} {
                reverse_proxy localhost:8000
                encode gzip
                header {
                    Strict-Transport-Security "max-age=31536000;"
                    X-Content-Type-Options nosniff
                    X-Frame-Options DENY
                    Referrer-Policy no-referrer-when-downgrade
                }
            }
            EOF

            echo "Restarting Caddy..."
            sudo systemctl restart caddy

            echo "Verifying deployment..."
            sleep 5
            curl -I http://localhost || curl -I http://localhost:80
