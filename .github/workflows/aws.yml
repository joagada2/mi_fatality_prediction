name: CI/CD Pipeline with Dependency Management

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Set Up Environment
      run: |
        echo "Updating system and resolving package conflicts..."
        sudo apt-get update

        # Remove conflicting package
        if dpkg -l | grep -q containerd; then
          echo "Removing conflicting package containerd..."
          sudo apt-get remove -y containerd || true
        fi

        # Clean up and ensure no broken packages remain
        sudo apt-get clean
        sudo apt-get autoremove -y

        # Install Docker dependencies
        echo "Installing Docker..."
        sudo apt-get install -y \
          apt-transport-https \
          ca-certificates \
          curl \
          software-properties-common
        
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

        sudo apt-get update
        sudo apt-get install -y docker-ce docker-ce-cli containerd.io || exit 1

    - name: Ensure Sufficient Disk Space
      run: |
        echo "Checking disk space..."
        df -h
        echo "Cleaning up if space is insufficient..."
        docker system prune -af || true
        df -h

    - name: Ensure Docker and Nginx Are Running
      run: |
        echo "Starting Docker and Nginx services..."
        sudo systemctl restart docker || exit 1
        sudo systemctl restart nginx || exit 1

    - name: Validate AWS CLI and IAM Role
      env:
        AWS_DEFAULT_REGION: us-east-2
      run: |
        echo "Testing AWS CLI configuration..."
        aws sts get-caller-identity || exit 1

    - name: Authenticate with AWS ECR
      env:
        AWS_DEFAULT_REGION: us-east-2
      run: |
        echo "Authenticating with AWS ECR..."
        ECR_URL="<your-ecr-url>" # Replace this with your ECR URL
        aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_URL || exit 1

    - name: Pull Docker Image from ECR
      run: |
        echo "Pulling Docker image from ECR..."
        docker pull <your-ecr-url>/mi_fatality_prediction:latest || exit 1

    - name: Run Docker Container
      run: |
        echo "Running the Docker container..."
        docker stop mi_fatality_prediction || true
        docker rm mi_fatality_prediction || true
        docker run -d --name mi_fatality_prediction -p 8080:8080 <your-ecr-url>/mi_fatality_prediction:latest || exit 1

    - name: Configure Nginx
      run: |
        echo "Configuring Nginx..."
        cat <<EOF | sudo tee /etc/nginx/sites-available/fastapi
        server {
            listen 80;
            server_name localhost;

            location / {
                proxy_pass http://127.0.0.1:8080;
                proxy_set_header Host \$host;
                proxy_set_header X-Real-IP \$remote_addr;
                proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto \$scheme;
            }
        }
        EOF
        sudo ln -sf /etc/nginx/sites-available/fastapi /etc/nginx/sites-enabled/
        sudo nginx -t || exit 1
        sudo systemctl restart nginx || exit 1

    - name: Test Deployment
      run: |
        echo "Testing deployment..."
        curl -v http://localhost || exit 1
